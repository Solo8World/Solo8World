<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lee Blog</title>
  
  <subtitle>Less is more.  enmm... except hair</subtitle>
  <link href="leeblog.icu/atom.xml" rel="self"/>
  
  <link href="leeblog.icu/"/>
  <updated>2022-05-26T09:43:23.271Z</updated>
  <id>leeblog.icu/</id>
  
  <author>
    <name>Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PG窗口函数的应用实践</title>
    <link href="leeblog.icu/2022/05/26/"/>
    <id>leeblog.icu/2022/05/26/</id>
    <published>2022-05-26T11:25:48.000Z</published>
    <updated>2022-05-26T09:43:23.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>窗口函数主要用于聚合计算，相当于我们的分组语句group by。<br>常用的sql语句往往只支持单一的数据范围统计，而窗口函数支持更加灵活更加多样的数据范围划定。<br>本质上，是否需要使用窗口函数，取决于你的需求场景是否涉及到同一种事物的不同数据范围的同时计算。</p><h3 id="排名类"><a href="#排名类" class="headerlink" title="排名类"></a>排名类</h3><p>排名，普通的只涉及到单一数据范围的排名的话，我们只需要正常的排序就可以满足，当你需要同时计算每个单位在不同数据范围下的排名计算，就需要使用窗口函数，<br>比如各个店铺销售额在楼层中的排名、在所属业态中的排名、在整个商场中的排名。</p><ul><li><p>源表结构示意</p><table><thead><tr><th align="left">shop_code</th><th align="left">shop_name</th><th align="left">floor_code</th><th align="left">order_date</th><th align="left">order_amount</th><th align="left">market_code</th></tr></thead><tbody><tr><td align="left">HT2021051200025</td><td align="left">BSiEE本涩</td><td align="left">L2</td><td align="left">2022-05-20</td><td align="left">6786</td><td align="left">000035</td></tr><tr><td align="left">HT2021051300007</td><td align="left">ROOKIE</td><td align="left">L3</td><td align="left">2022-05-20</td><td align="left">98887</td><td align="left">000035</td></tr><tr><td align="left">HT2021051300013</td><td align="left">剪花娘子</td><td align="left">L5</td><td align="left">2022-05-20</td><td align="left">4567</td><td align="left">000035</td></tr><tr><td align="left">HT2021051300014</td><td align="left">阿香米线</td><td align="left">L5</td><td align="left">2022-05-20</td><td align="left">5845.23</td><td align="left">000035</td></tr><tr><td align="left">HT2021051700025</td><td align="left">森林鸟</td><td align="left">L2</td><td align="left">2022-05-20</td><td align="left">37463</td><td align="left">000035</td></tr><tr><td align="left">……</td><td align="left">……</td><td align="left">……</td><td align="left">……</td><td align="left">……</td><td align="left">……</td></tr></tbody></table></li><li><p>分别统计每店铺每天的销售额 在所在楼层中的排名、全场中的排名.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sale.shop_code,</span><br><span class="line">       sale.shop_name ,</span><br><span class="line">       sale.order_date <span class="keyword">as</span> 销售日期 ,</span><br><span class="line">       sale.order_amount <span class="keyword">as</span> 销售额,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> sale.market_code, sale.order_date <span class="keyword">ORDER</span> <span class="keyword">BY</span> sale.order_amount <span class="keyword">DESC</span>) <span class="keyword">AS</span> 全场范围排名,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> sale.market_code, sale.floor_code, sale.order_date <span class="keyword">ORDER</span> <span class="keyword">BY</span> sale.order_amount <span class="keyword">DESC</span>) <span class="keyword">AS</span> 店铺在所在楼层中的排名</span><br><span class="line"><span class="keyword">FROM</span> sale_data sale</span><br></pre></td></tr></table></figure></li><li><p>查询结果  (示例)</p><table><thead><tr><th align="left">shop_code</th><th align="left">shop_name</th><th align="left">floor_code</th><th align="left">销售日期</th><th align="left">销售额</th><th align="left">全场范围排名</th><th align="left">店铺在所在楼层中的排名</th></tr></thead><tbody><tr><td align="left">WHDYC(20)Z</td><td align="left">汉黄山</td><td align="left">L5</td><td align="left">2022-05-20</td><td align="left">53038</td><td align="left">1</td><td align="left">1</td></tr><tr><td align="left">HT2021121300</td><td align="left">老寺黄金</td><td align="left">B1</td><td align="left">2022-05-20</td><td align="left">27799</td><td align="left">2</td><td align="left">1</td></tr><tr><td align="left">HT2021052500</td><td align="left">楚去菜</td><td align="left">L4</td><td align="left">2022-05-20</td><td align="left">21433.41</td><td align="left">3</td><td align="left">1</td></tr><tr><td align="left">HT2021121400</td><td align="left">Cdddoo</td><td align="left">L1</td><td align="left">2022-05-20</td><td align="left">20531</td><td align="left">4</td><td align="left">1</td></tr><tr><td align="left">HT2021052600037</td><td align="left">火瀑麻</td><td align="left">L4</td><td align="left">2022-05-20</td><td align="left">17260</td><td align="left">5</td><td align="left">2</td></tr><tr><td align="left">WHDYC(20)Z</td><td align="left">晓南福</td><td align="left">L4</td><td align="left">2022-05-20</td><td align="left">16358.25</td><td align="left">6</td><td align="left">3</td></tr><tr><td align="left">HT2021080500</td><td align="left">小米家</td><td align="left">L1</td><td align="left">2022-05-20</td><td align="left">13678.03</td><td align="left">7</td><td align="left">2</td></tr><tr><td align="left">……</td><td align="left">……</td><td align="left">……</td><td align="left">……</td><td align="left">……</td><td align="left">……</td><td align="left">……</td></tr></tbody></table></li></ul><h3 id="聚合类"><a href="#聚合类" class="headerlink" title="聚合类"></a>聚合类</h3><p>聚合类，或者说累加，包括sum、avg、max、count等聚合函数。<br>同样的，如果我们只涉及到一种数据范围的聚合计算，那么只需要正常的聚合语句就可以完成。<br>当你需要同时计算某个值在不同数据范围下的聚合计算，就需要使用窗口函数，比如同时计算某商场每日新增的会员数量，以及截止到当日累计的会员数量。</p><ul><li><p>源数据表结构示意,注册记录表</p><table><thead><tr><th align="left">id</th><th align="left">name</th><th align="left">register_date</th></tr></thead><tbody><tr><td align="left">115752</td><td align="left">李某某</td><td align="left">2022-04-16</td></tr><tr><td align="left">110498</td><td align="left">朱某某</td><td align="left">2022-04-09</td></tr><tr><td align="left">109282</td><td align="left">熊某某</td><td align="left">2022-04-03</td></tr><tr><td align="left">109290</td><td align="left">徐某某</td><td align="left">2022-04-03</td></tr><tr><td align="left">108456</td><td align="left">周某某</td><td align="left">2022-03-28</td></tr><tr><td align="left">107925</td><td align="left">殷某某</td><td align="left">2022-03-24</td></tr><tr><td align="left">107575</td><td align="left">樱某某</td><td align="left">2022-03-20</td></tr><tr><td align="left">107595</td><td align="left">万某某</td><td align="left">2022-03-20</td></tr><tr><td align="left">107597</td><td align="left">郑某某</td><td align="left">2022-03-20</td></tr><tr><td align="left">……</td><td align="left">……</td><td align="left">……</td></tr></tbody></table></li><li><p>统计每日新增会员数及截至当日会员总数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  m.register_date,</span><br><span class="line">        <span class="keyword">count</span>(<span class="number">0</span>)                                                       <span class="keyword">AS</span> 当日新增会员数,</span><br><span class="line">        <span class="keyword">sum</span>(<span class="keyword">count</span>(<span class="number">0</span>)) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> m.register_date)                  <span class="keyword">AS</span> 截止当日总会员数</span><br><span class="line"> <span class="keyword">FROM</span> bi_data_member m</span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span>  register_date</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> m.register_date <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure></li><li><p>查询结果  (示例)</p><table><thead><tr><th align="left">register_date</th><th align="left">当日新增会员数</th><th align="left">截止当日总会员数</th></tr></thead><tbody><tr><td align="left">2022-05-26</td><td align="left">2</td><td align="left">120092</td></tr><tr><td align="left">2022-05-25</td><td align="left">7</td><td align="left">120090</td></tr><tr><td align="left">2022-05-07</td><td align="left">62</td><td align="left">120083</td></tr><tr><td align="left">2022-05-06</td><td align="left">98</td><td align="left">120021</td></tr><tr><td align="left">2022-05-05</td><td align="left">76</td><td align="left">119923</td></tr><tr><td align="left">2022-05-04</td><td align="left">270</td><td align="left">119847</td></tr><tr><td align="left">2022-05-03</td><td align="left">273</td><td align="left">119577</td></tr><tr><td align="left">2022-05-02</td><td align="left">289</td><td align="left">119304</td></tr><tr><td align="left">2022-05-01</td><td align="left">308</td><td align="left">119015</td></tr><tr><td align="left">……</td><td align="left">……</td><td align="left">……</td></tr></tbody></table></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从窗口函数的结构上看, 它是这么一个结构组成:  <code>fun OVER (PARTITION BY...  ORDER BY...)</code>  </p><ul><li><code>fun</code>表示最终的计算操作函数,可以是窗口函数专用函数,也支持sum、max、avg等通用聚合函数.  </li><li><code>OVER</code> 无实际意义.  </li><li><code>PARTITION BY</code>标识计算的数据范围的划分,也就是分组.  </li><li><code>ORDER BY</code> 这个函数就有意思了,通常概念中它起到排序的作用,比如我们第一个销售排名示例.但大部分情况下,比如我们的会员新统计的示例,他也起到了数据范围圈定的作用.在示例中它的作用是把合计的数据范围截止在当前的日期.</li><li><code>PARTITION BY</code> 和<code>ORDER BY</code>,至少使用其中一个,否则窗口无效.</li></ul><h3 id="其他运用"><a href="#其他运用" class="headerlink" title="其他运用"></a>其他运用</h3><p>移动计算类,除了以上我们提到的示例外,窗口函数还支持移动计算的场景.<br>其实本质上还是数据范围的划定,移动计算的含义就是可以通过指定每一行的前后多少行来聚合计算.而不单单只是根据某些业务字段来分组计算.<br>这种类型我本人尚未在实际业务场景中用到过,所以本文不再赘述.</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul><li><p>一些窗口函数</p><table><thead><tr><th align="left">函数名称</th><th align="left">返回类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">row_number()</td><td align="left">bigint</td><td align="left">在其分区中的当前行号，从1开始计算</td></tr><tr><td align="left">rank()</td><td align="left">bigint</td><td align="left">有间隔的当前行排名；与它的第一个相同行的row_number相同</td></tr><tr><td align="left">dense_rank()</td><td align="left">bigint</td><td align="left">没有间隔的当前行排名；这个函数计数对等组</td></tr><tr><td align="left">percent_rank</td><td align="left">double precision</td><td align="left">当前行的相对排名：（rank-1）/(总行数-1)</td></tr><tr><td align="left">cume_dist()</td><td align="left">double precision</td><td align="left">当前行的相对排名：（前面的行数或与当前行相同的行数）/（总行数）</td></tr><tr><td align="left">ntile(num_buckets integer)</td><td align="left">integer</td><td align="left">从1到参数的整数范围，尽可能相等的划分分区</td></tr><tr><td align="left">lag(value any [, offset integer [, default any ]])</td><td align="left">类型同value</td><td align="left">计算分区当前行的前offset行，返回value。如果没有这样的行，返回default替代。offset和default都是当前计算的结果。如果忽略了则offset默认是1，default默认是null</td></tr><tr><td align="left">lead(value any [, offset integer [, default any ]])</td><td align="left">类型同value</td><td align="left">计算分区当前行的后offset行，返回value。如果没有这样的行，返回default替代。offset和default都是当前计算的结果。如果忽略了则offset默认是1，default默认是null</td></tr><tr><td align="left">first_value(value any)</td><td align="left">类型同value</td><td align="left">返回窗口第一行的计算value值</td></tr><tr><td align="left">last_value(value any)</td><td align="left">类型同value</td><td align="left">返回窗口最后一行的计算value值</td></tr><tr><td align="left">nth_value(value any,nth integer)</td><td align="left">类型同value</td><td align="left">返回窗口的第nth行的计算value，从1开始计数，没有符合的行则返回null</td></tr></tbody></table></li><li><p>window子句使用(分组后的再次划分)：</p><table><thead><tr><th align="left">关键字</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">preceding</td><td align="left">往前</td></tr><tr><td align="left">following</td><td align="left">往后</td></tr><tr><td align="left">current row</td><td align="left">当前行</td></tr><tr><td align="left">unbounded</td><td align="left">起点</td></tr><tr><td align="left">unbounded preceding</td><td align="left">表示从前面的起点</td></tr><tr><td align="left">unbounded following</td><td align="left">表示到后面的终点</td></tr></tbody></table></li></ul><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2022/05/26/">leeblog.icu/2022/05/26/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">常用的sql语句往往只支持单一的数据范围统计，而窗口函数支持更加灵活更加多样的数据范围划定</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="postgres" scheme="leeblog.icu/tags/postgres/"/>
    
  </entry>
  
  <entry>
    <title>记录一次机器断电后pg的重启失败的故障解决</title>
    <link href="leeblog.icu/2022/05/24/"/>
    <id>leeblog.icu/2022/05/24/</id>
    <published>2022-05-24T11:25:48.000Z</published>
    <updated>2022-05-26T09:43:23.271Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2022-05-24 11:39:31.957 CST [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432</span><br><span class="line">2022-05-24 11:39:31.957 CST [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432</span><br><span class="line">2022-05-24 11:39:31.957 CST [1] LOG:  listening on Unix socket &quot;&#x2F;var&#x2F;run&#x2F;postgresql&#x2F;.s.PGSQL.5432&quot;</span><br><span class="line">2022-05-24 11:39:31.960 CST [24] LOG:  database system was interrupted; last known up at 2022-05-24 07:18:02 CST</span><br><span class="line">2022-05-24 11:39:31.961 CST [24] LOG:  invalid primary checkpoint record</span><br><span class="line">2022-05-24 11:39:31.961 CST [24] PANIC:  could not locate a valid checkpoint record</span><br><span class="line">2022-05-24 11:39:43.952 CST [25] FATAL:  the database system is starting up</span><br><span class="line">2022-05-24 11:39:44.719 CST [26] FATAL:  the database system is starting up</span><br><span class="line">2022-05-24 11:39:45.663 CST [27] FATAL:  the database system is starting up</span><br><span class="line">2022-05-24 11:39:48.726 CST [1] LOG:  startup process (PID 24) was terminated by signal 6: Aborted</span><br><span class="line">2022-05-24 11:39:48.726 CST [1] LOG:  aborting startup due to startup process failure</span><br><span class="line">2022-05-24 11:39:48.898 CST [1] LOG:  database system is shut down</span><br></pre></td></tr></table></figure><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>测试环境postgre数据库是以docker容器部署的单节点服务，机器在本地机房里。</p><p>昨日凌晨机房又一次突然断电，断电本是常事，奈何这次机房服务器再次恢复后pg的容器未能成功重启。</p><p>运维无策，大群求助。我一看这还了得，毕竟辛苦一周的工作成果还在数据库里尚未备份，可不敢怠慢。</p><p>果断出手，连接vpn，登陆服务器。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ul><li><p><code>docker ps</code> 可以看到，pg的容器还在挣扎着不断启动、失败、启动、失败。<br><code>docker logs -f --tail200 pg</code> 查看容器启动日志，发现情况还不算严重。应是断电时pg正在进行事务操作，突然断电导致事务日志文件损坏，pg再次启动时读取失败。此时应该只需进入pg容器里重置事务日志即可。<br>然而是容器部署的，容器始终无法启动成功，根本没有下手执行重置的时机。</p><img src="https://s1.ax1x.com/2022/05/26/XEIbo6.png" width="100%">  </li><li><p>这机器的服务部署并非出自我手，为了搞清敌情，<code>docker inspect pg</code>，查看容器详情。<br>通过inspect可以看到，容器的数据存储位置映射了外部的文件位置。</p><img src="https://i.imgur.com/yFe8s81.png" width="100%"></li><li><p>当即立断，决定启动一个临时容器映射同样的文件存储位置来执行日志重置。<br>先是一个<code>docker update --restart=no pg</code>，叫停当前容器的不断重启行为，防止启动临时容器后两个容器同时读写日志文件造成场面进一步的混乱。<br>然后基于原来容器的镜像，以临时模式启动一个新容器，并进入容器bash端，切换postgres用户（默认必须以postgres执行），找到rest工具位置全路径，<br>ctrl c ，ctrl v，回车，</p><img src="https://i.imgur.com/M3QNivZ.png" width="100%"><img src="https://i.imgur.com/cgF1cy2.png" width="100%"></li><li><p>执行成功。退出当前容器，因为是临时的所以退出即运行终止。<br><code>docker start pg</code>  再次启动原来的容器，启动成功。<br>有惊无险，打完收工，没有备份，下次一定。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>使用到的命令按执行顺序如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> ps -a                          <span class="comment">#查看容器列表</span></span><br><span class="line"><span class="variable">$docker</span> logs -f --tail 200 pg          <span class="comment">#查看pg容器启动日志</span></span><br><span class="line"><span class="variable">$docker</span> inspect pg                     <span class="comment">#查看容器配置详情</span></span><br><span class="line"><span class="variable">$docker</span> update --restart=no pg         <span class="comment">#取消失败自动重启</span></span><br><span class="line"><span class="variable">$docker</span> run -it  -v   /opt/appdata/pgdata:/var/lib/postgresql/data  --env PGDATA=/var/lib/postgresql/data/pgdata  postgres:13   /bin/bash  <span class="comment">##启动临时容器并进入bash</span></span><br><span class="line"><span class="variable">$su</span> postgres                          <span class="comment">#临时容器内:切换postgres用户</span></span><br><span class="line"><span class="variable">$pg_resetwal</span> -f /var/lib/postgresql/data/pgdata  <span class="comment">#临时容器内: 执行事务日志重置</span></span><br><span class="line"><span class="variable">$exit</span>                                 <span class="comment">#临时容器内:退出容器</span></span><br><span class="line"><span class="variable">$docker</span> start pg                      <span class="comment">#启动pg容器</span></span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2022/05/24/">leeblog.icu/2022/05/24/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">常用的sql语句往往只支持单一的数据范围统计，而窗口函数支持更加灵活更加多样的数据范围划定</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="postgres" scheme="leeblog.icu/tags/postgres/"/>
    
  </entry>
  
  <entry>
    <title>Navicat16 破解（重置试用）</title>
    <link href="leeblog.icu/2022/05/12/"/>
    <id>leeblog.icu/2022/05/12/</id>
    <published>2022-05-12T04:10:05.000Z</published>
    <updated>2022-05-12T06:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-删除Navicat注册表文件"><a href="#1-删除Navicat注册表文件" class="headerlink" title="1.删除Navicat注册表文件"></a>1.删除Navicat注册表文件</h3><p>最简单粗暴的办法是直接备份移除dconf文件。</p><p><code>简单来说，dconf 是一种基于键的配置存储系统，有点类似于 Windows 下的注册表。</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv .config/dconf/user .config/dconf/user_b</span><br></pre></td></tr></table></figure><p>直接移除固然简单，但有可能造成其他软件的一些配置的重置。<br>所以更文雅的做法是编辑他，指定navicat的注册表进行删除重置。<br>dconf文件，可使用dconf命令直接编辑，本文推荐使用各自系统对应的图形编辑器，<br>以作者的arch系统为例，对应图形编辑器是dconf-editor，安装使用即可，其他发行版可自行搜索。</p><p>安装与启动：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S dconf-editor&amp;&amp;dconf-ecditor</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2022/05/12/O0MYuT.png" width="70%">    <p>启动后右键选中重置即可。</p><h3 id="2-删除navicat配置文件"><a href="#2-删除navicat配置文件" class="headerlink" title="2.删除navicat配置文件"></a>2.删除navicat配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.config/navicat/Premium/preferences.json</span><br></pre></td></tr></table></figure><p>不过该方法会直接把原本本地配置的链接或密码删除，打开navicat后需要重新配置链接,<br>笔者是登陆了navicat的云帐号，数据库链接和分组可以直接同步下来，但是密码还是要再输一遍，<br>所以后续会尝试通过编辑该配置json,看能否通过删除部分可疑的密钥来实现重置。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>通过学习dconf文件的编辑。我们可以解锁更多玩法，本文仅供学习交流，有能力请尽快入正。</p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2022/05/12/">leeblog.icu/2022/05/12/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">适用与linux/mac版本重置试用，windows版本可参考</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="工具" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="leeblog.icu/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Idea常用插件及简介</title>
    <link href="leeblog.icu/2022/04/29/"/>
    <id>leeblog.icu/2022/04/29/</id>
    <published>2022-04-29T11:25:48.000Z</published>
    <updated>2022-05-12T06:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><p><strong>Translation</strong><code>翻译插件</code></p><p>故名思义，Translation是一款翻译插件。支持<code>自定义翻译引擎</code>、<code>划词翻译</code>，<code>自动翻译</code>。</p><p>选中文字（中文或英文）：<br><code>ctrl</code>+<code>shift</code>+ <code>y</code> 翻译<br><code>ctrl</code>+<code>shift</code>+ <code>x</code> 翻译并选中替换</p><p>同时，可以在插件配置中开启文档自动翻译。</p><p>使用场景，翻译源码注释、翻译log错误信息、起变量名，生产力MAX。</p><h2 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h2><p><strong>Alibaba Java Coding Guidelines</strong> <code>代码质量扫描</code>   </p><p>代码质量扫描，根据阿里代码规约标注不符合规范的代码。</p><h2 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h2><p><strong>MybatisX</strong> <code>Mybatis框架辅助插件</code>   </p><p>Mapper接口和XML实现可以来回跳转，也可以直接生成对应xml标签，mapper和xml支持自动提示，如jpa(参考MybatisCodeHelperPro)。</p><h2 id="NO-4"><a href="#NO-4" class="headerlink" title="NO.4"></a>NO.4</h2><p><strong>GitToolBox</strong> <code>git辅助插件</code>   </p><p>自动检查更新仓库代码,代码行级展示提交信息，提交通知、延迟通知等。</p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2022/04/29/">leeblog.icu/2022/04/29/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">工具即生产力！插件即生产力！</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="工具" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="插件" scheme="leeblog.icu/tags/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="工具" scheme="leeblog.icu/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Jetbrains旗下所有产品激活方法</title>
    <link href="leeblog.icu/2022/04/26/"/>
    <id>leeblog.icu/2022/04/26/</id>
    <published>2022-04-26T08:59:33.000Z</published>
    <updated>2022-05-12T03:51:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在网络注册码乱象丛生的今天，我们再难以像以前那样找到稳定可用的方法了。</p></blockquote><blockquote><p>随着 <a href="https://zhile.io/">知了大佬</a> 的出现，我们终于看到了白嫖的曙光————无限试用插件<a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-deprecated.html"><code>IDE Eval Reset</code></a>。</p></blockquote><blockquote><p>然而，Jetbrains道高一尺，随着idea<code>2021.2.3</code>版本的推出，我们含泪挥别<a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-deprecated.html"><code>IDE Eval Reset</code></a></p></blockquote><blockquote><p>可是，知了大佬技艺日渐精进，魔高一丈，最终祭出大杀器————<a href="https://zhile.io/2021/11/29/ja-netfilter-javaagent-lib.html">ja-netfilter</a> !!!</p></blockquote><blockquote><p>接下来，本文将带大家一起见证它的牛逼。。。。 </p></blockquote><blockquote><p>最后，本文只做个人学习研究之用，不得用于商业用途！<br>建议<a href="https://www.jetbrains.com/idea/buy/#commercial">点击链接</a> 购买正版</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>官方下载相关产品（推荐下载 <a href="https://www.jetbrains.com/toolbox-app/">ToolBox</a> 进行相关产品安装，便于后期软件及软件管理升级）</p> <img src="https://s1.ax1x.com/2022/04/27/LLSuTS.png" width="50%"> </li><li><p>访问<a href="https://jetbra.in/s">https://jetbra.in/s</a> 下载 <a href="https://jetbra.in/files/ja-netfilter-all-7d68b53deb1b1a16f8e95ecf8f3f98805d18368d.zip">ja-netfilter-all.zip</a></p></li><li><p>解压ja-netfilter-all.zip</p></li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote><p>两种进行路径。</p></blockquote><h4 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h4><ol><li><p>通过注册帐号并登陆进入试用期，打开idea。或在<a href="https://www.ajihuo.com/idea/4222.html">https://www.ajihuo.com/idea/4222.html</a> 该站获取激活码，打开idea。</p></li><li><p>打开idea菜单<code>Help</code>-&gt;<code>Edite Custom VM Options...</code>,对idea启动脚本进行编辑，在文件下面添加一行:</p><p><code>-javaagent:/你/的/路/径/ja-netfilter-all/ja-netfilter.jar</code></p><p>如图：</p><img src="https://s1.ax1x.com/2022/04/27/LLCcmq.png" width="100%">  </li></ol><ol start="3"><li>重启idea，在 <a href="https://jetbra.in/s">https://jetbra.in/s</a> 复制对应的激活码，输入注册码，激活成功。</li></ol><hr><h4 id="第二种-该方法不一定能成功"><a href="#第二种-该方法不一定能成功" class="headerlink" title="第二种 该方法不一定能成功"></a>第二种 <code>该方法不一定能成功</code></h4><ol><li>进入文件夹ja-netfilter-all/scripts/，执行系统对应的脚本(windows执行.vbs后缀的,mac及linux执行.sh后缀的)。</li><li>启动idea,在<a href="https://jetbra.in/s">https://jetbra.in/s</a>复制对应的激活码，输入注册码，激活成功。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>编辑<code>~/ja-netfilter-all/config/mymap.conf</code>可随意修改到期时间及licenseeName。</li><li>该软件适用所有插件</li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><ul><li>再次致谢知了<a href="https://zhile.io/">https://zhile.io/</a></li></ul><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2022/04/26/">leeblog.icu/2022/04/26/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">在网络注册码乱象丛生的今天，我们再难以像以前那样找到稳定可用的方法了</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="工具" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="leeblog.icu/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="idea" scheme="leeblog.icu/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>优秀开源项目之Shift-etl,从此告别无意义加班</title>
    <link href="leeblog.icu/2020/10/10/"/>
    <id>leeblog.icu/2020/10/10/</id>
    <published>2020-10-10T12:21:48.000Z</published>
    <updated>2022-05-13T03:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一个简单轻量的ETL(Extract-Transform-Load)工具，简单到您花5到10分钟的时间读完这篇文章便可以了然它的使用方法，如果你有数据接口对接的业务场景，你可以参考它。<br>它会以数据库配置的方式，帮助你实现数据接口对接，减少重复编码的工作量，同时可以随时灵活调整、降低后续业务调整带来的影响。</p><p>它的核心代码只有三页,分别是<a href="https://github.com/Solo8World/shift-etl/blob/master/src/main/java/com/example/api/service/EtlExtractService.java">EtlExtractService</a> (数据抽取类)、<a href="https://github.com/Solo8World/shift-etl/blob/master/src/main/java/com/example/api/service/EtlProcessService.java">EtlProcessService</a> (数据处理类)、<a href="https://github.com/Solo8World/shift-etl/blob/master/src/main/java/com/example/api/service/EtlLoadService.java">EtlLoadService</a> (数据加载类)；</p><p>然后这是它的github地址：<a href="https://github.com/Solo8World/shift-etl">https://github.com/Solo8World/shift-etl</a>  </p><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p>数据抽取(Extract) -&gt; 数据处理(Transform) -&gt; 数据加载(Load)</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>java 1.8+</li><li>mysql5.6+</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p> “以下均为示例，作者很狗的找了个百度文库的接口来作请求”</p><h3 id="一句需求"><a href="#一句需求" class="headerlink" title="一句需求"></a>一句需求</h3><blockquote><p>对接百度文库接口将返回书籍数据存入本地表demo_wenku_book中。  </p></blockquote><p>接口数据结构示例：<br><img src="https://s1.ax1x.com/2020/10/10/0szB8O.png" width="150%"></p><p>目标表表结构<br><img src="https://s1.ax1x.com/2020/10/10/0yDp5D.png" width="150%"> </p><h3 id="三步实现"><a href="#三步实现" class="headerlink" title="三步实现"></a>三步实现</h3><p><strong>1.将接口信息录入etl_source表</strong><br><img src="https://s1.ax1x.com/2020/10/10/06nw4S.png" width="300%">  </p><p>   etl_source表字段意义解释：  </p><p>   <code>source_key</code>：一个数据同步任务的自定义标识，后面调用etl执行同步时会需要传入此标识  </p><p>   <code>source_url</code>：接口全路径，支持https调用  </p><p>   <code>request_method</code>：接口请求方式，‘GET’，‘post’等，不区分大小写   </p><p>   <code>content_type</code>：接口传参类型，支持0:form、1:json、2:urlencoded传参  </p><p>   <code>process_method</code>：接口数据处理方式，支持0:同步处理(同步进入数据处理及加载逻辑),1:异步处理(异步进入数据处理及加载逻辑),2:自定义处理(不进入数据处理及加载逻辑)  </p><p>   <code>remark</code>： 自定义备注</p><p><strong>2.将数据处理规则录入etl_data_process_rule表</strong><br><img src="https://s1.ax1x.com/2020/10/10/06uA58.png" width="150%">    </p><p>   etl_data_process_rule表字段意义解释：  </p><p>   <code>source_key</code>:一个数据同步任务的自定义标识,同我们第一步中自定义的标识  </p><p>   <code>data_key</code>:源数据json结构中字段位置，<code>data.list[].show_doc_id</code> 中，<code>[]</code>标识为数组  </p><p>   <code>has_mapping</code>:当前示例需求中并不需要，该字段含义是<code>是否需要联查当前数据库中其他字段值来替换</code>，它应用的业务场景如：我们现有一张书籍分类表，源数据结构给了一个书籍分类字段”哲学”，而我们需要转换成分类表对应id并给demo_wenku_book存入。  </p><p>   <code>mapping_id</code>:当前示例需求中并不需要，业务场景同上，该字段用于指定联查操作（etl_data_process_mapping） </p><p>   <code>has_distinct</code>:是否需以此字段进行数据去重 </p><p>   <code>target_table</code>:对应存入表表名，该示例需求下为demo_wenku_book   </p><p>   <code>target_columns</code>:对应存入表字段字段名   </p><p>   <code>default_value</code>:源数据字段值为空时的默认值，无默认值为null</p><p>   <code>exec_sort</code>:该示例需求中并不需要，一个数据同步任务下支持多次数据处理操作，该字段指定了数据处理的执行顺序。业务场景如：先将源数据的书籍分类信息去重存入分类表，再将源数据的书籍信息存入书籍表   </p><p>   <code>exec_type</code>:数据处理后的加载操作类型，支持<code>insert</code>(新增),<code>replace</code>(替换),<code>update</code>(修改),<code>delete</code>(删除),<code>insert or update</code>(根据条件动态新增或修改),<code>java</code>(执行一段java函数)  </p><p>   <code>is_condition</code>:该示例需求中并不需要，该字段的意义是<code>是否为条件字段</code>，条件字段应用于<code>update</code>、<code>delete</code>、<code>insert or update</code>操作类型。  </p><p>   <code>condition_symbol</code>:该示例需求中并不需要，该字段的意义是<code>条件字段的比较符</code>，支持 <code>=``&lt;``&lt;=</code>。当操作类型为<code>java</code>时，该字段用于指明java函数的入参类型(String/Integer)  </p><p>   <code>remark</code>:自定义备注  </p><p><strong>3.调用EtlExtractService.executorClient执行数据同步</strong>  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executorClient</span><span class="params">(<span class="meta">@NotNull</span> String sourceKey,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Map&lt;String, Object&gt; param,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Map&lt;String, String&gt; header)</span></span>;  </span><br></pre></td></tr></table></figure><p>方法参数:<br> <code>sourceKey</code>:一个数据同步任务的自定义标识<br> <code>param</code>:该示例需求中并不需要，接口请求参数，这个其实也可以做成动态自定义而无需硬编码的,看实际需求业务场景<br> <code>header</code>:该示例需求中并不需要，接口请求头部信息，同上  </p><p>所以该示例需求下这么调用一下：  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">etlExtractService.executorClient(<span class="string">&quot;wenku-book&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">0</span>),<span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>啊哦，肝到这里出了几个问题：<br>1.项目启动数据库一直连接不上，时区问题驱动版本问题都排查了个遍，最终在application配置文件上找到了原因：我们项目用的yml格式文件，而yml对小数点的解析有问题，而我嫖阿里的rds密码正好就有一个小数点，害，yml改不了俺改。<br>2.demo表忘记加主键自增了，这个倒没花啥时间<br>3.<code>Data too long for column &#39;summary&#39; at row 2</code>，源数据返回的书籍简介超长了，问题不大，加大加长demo表对应字段的长度</p><p>ok继续<br><strong>有了</strong>：<br><img src="https://s1.ax1x.com/2020/10/10/0yRfKg.png" width="150%"><br>(看来大家都有一个发财梦)</p><p>与此同时我们的<code>etl_source_data</code>表中也多了一条数据，嗯是两条：<br><img src="https://s1.ax1x.com/2020/10/10/0yWgoR.png" width="150%"><br>第一条是一条因为数据过长加载失败的记录。第二条最后成功加载的记录。</p><p>   etl_source_data表字段意义解释：<br>   <code>source_key</code>:一个数据同步任务的自定义标识,无需赘述<br>   <code>source_data</code>:同步回来的源数据<br>   <code>processing_status</code>:数据处理/加载状态0-未处理1-处理中,2-处理完成 3-处理失败<br>   <code>action_date</code>:开始处理时间<br>   <code>process_time</code>:处理及加载耗时(毫秒)，我这里网络不好所以耗时较长，正常百毫秒<br>   <code>process_result</code>:处理结果，处理状态失败的话这里会保存错误信息，便于排查  </p><blockquote><p>以上，啰嗦那么多其实操作就简单三步</p></blockquote><hr><h2 id="高（fu）级（za）进（yi）阶（dian）"><a href="#高（fu）级（za）进（yi）阶（dian）" class="headerlink" title="高（fu）级（za）进（yi）阶（dian）"></a>高（fu）级（za）进（yi）阶（dian）</h2><blockquote><p>shift etl能做到的不止如此，更多玩法明天再写，溜了。。。</p></blockquote><p>ps：调用代码俺写在了test目录下,可以搞下来自己试运行.实际业务场景下大多是以定时器定时触发同步任务，而同步任务动态参数逻辑可以在定时任务中实现</p><p>再ps：这个其实是俺自己写的项目，所以这篇bolg的标题那么优秀</p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2020/10/10/">leeblog.icu/2020/10/10/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">这是一个相对简陋也非常轻量的ETL(Extract-Transform-Load)工具，如果你有数据接口对接的业务场景，你可以参考它。</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="代码" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="java" scheme="leeblog.icu/tags/java/"/>
    
    <category term="开源" scheme="leeblog.icu/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>idea插件git commit template的使用与changeLog的生成</title>
    <link href="leeblog.icu/2020/09/13/"/>
    <id>leeblog.icu/2020/09/13/</id>
    <published>2020-09-13T11:00:34.000Z</published>
    <updated>2022-04-29T01:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>git commit template 该插件是为了规范git提交注释的。一个项目一个团队的git log一定要整整齐齐的。<br>统一的提交注释规范，除了自己赏心悦目获得极大的舒适感以外，还能为后续的code review、版本升级change log文档的生成，提供极大的便利。  </p><ul><li><strong><a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-guidelines">Angular规范</a> 提交格式如下：</strong></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>(<span class="tag">&lt;<span class="name">scope</span>&gt;</span>): <span class="tag">&lt;<span class="name">subject</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BLANK</span> <span class="attr">LINE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BLANK</span> <span class="attr">LINE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>含义：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">提交类型(改动涉及范围): 简要描述</span><br><span class="line"><span class="tag">&lt;<span class="name">空行</span>&gt;</span></span><br><span class="line">详细描述(可换多行进行描述)</span><br><span class="line"><span class="tag">&lt;<span class="name">空行</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">页脚</span>&gt;</span>（BREAKING CHANGE重大改动描述；Close Issue）</span><br></pre></td></tr></table></figure></li><li><p><strong>提交类型：</strong></p><ul><li>feat：新功能开发</li><li>fix：bug修复</li><li>docs：项目文档改动</li><li>style： 代码格式（不影响代码运行的变动,空格,格式化,等等）</li><li>refactor：重构（理论上不影响功能的代码重构）</li><li>perf: 性能优化</li><li>test：增加或者修改测试</li><li>build: 影响构建系统或外部依赖项的更改(maven)</li><li>ci: 对CI配置文件和脚本的更改</li><li>chore：对非 src 和 test 目录的修改</li><li>revert: 还原上一次提交</li></ul></li></ul><ul><li><p><strong>以feat提交为例，commit message格式如下:</strong></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">feat(系统管理)</span>: 新增用户密码设置规则检验  </span><br><span class="line"></span><br><span class="line">(1)验证密码设置由大小写字母数字特殊符号任意三种组合</span><br><span class="line">(2)验证密码设置长度8-12位</span><br></pre></td></tr></table></figure></li><li><p>注：</p><ul><li>提交格式中<code>type</code> 、<code>subject</code>为必填，<code>scope</code>、<code>body</code> 、<code>footer</code>为选填 </li><li>revert提交时以revert:开头, 后面跟着被撤销Commit的Header。<br>Body部分的格式是固定的，必须写成This reverts commit <hash>,<br>其中的hash是被撤销 commit 的 SHA 标识符.</li></ul></li></ul><h2 id="Git-Commit-Template插件的安装与使用"><a href="#Git-Commit-Template插件的安装与使用" class="headerlink" title="Git Commit Template插件的安装与使用"></a><code>Git Commit Template</code>插件的安装与使用</h2><ul><li><strong>安装</strong>  </li></ul><p>idea中直接<code>File</code>-&gt;<code>Setting</code>-&gt;<code>Plugins</code>搜索安装即可<br><img src="https://s1.ax1x.com/2020/09/16/wcTUMQ.png" width="100%"></p><ul><li><strong>使用</strong>  </li></ul><ol><li><p>安装并重启idea后，操作提交时会有此按钮  </p><img src="https://s1.ax1x.com/2020/09/16/wcT2M4.png" width="100%"></li><li><p>点击弹出  </p><img src="https://s1.ax1x.com/2020/09/16/wcTHzD.png" width="100%"></li><li><p>按需填写并确认后生成以下格式：  </p><img src="https://s1.ax1x.com/2020/09/16/wcTjeA.png" width="100%"></li></ol><h2 id="利用conventional-changelog生成Change-log"><a href="#利用conventional-changelog生成Change-log" class="headerlink" title="利用conventional-changelog生成Change log"></a>利用conventional-changelog生成Change log</h2><ul><li><strong>安装</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g conventional-changelog-cli</span><br></pre></td></tr></table></figure></li><li><strong>生成</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conventional-changelog -p angular -i CHANGELOG.md -s</span><br></pre></td></tr></table></figure></li><li><strong>生成的md效果如下</strong>  </li></ul>  <img src="https://s1.ax1x.com/2020/09/16/wc7NY6.png" width="100%"><h2 id="更多可参考"><a href="#更多可参考" class="headerlink" title="更多可参考:"></a>更多可参考:</h2><p><a href="https://www.cnblogs.com/daysme/p/7722474.html">Git 提交的正确姿势：Commit message 编写指南</a><br><a href="https://blog.csdn.net/itguangit/article/details/99590995#t2">IDEA 中 Git Commit message 编写</a><br><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Commit message 和 Change log 编写指南</a>  </p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2020/09/13/">leeblog.icu/2020/09/13/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">一个项目一个团队的git log一定要整整齐齐的。统一的提交注释规范，除了自己赏心悦目获得极大的舒适感以外，还能为后续的code review、版本升级change log文档的生成，提供极大的便利。</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="工具" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="GIT" scheme="leeblog.icu/tags/GIT/"/>
    
    <category term="开发规范" scheme="leeblog.icu/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
    <category term="工具" scheme="leeblog.icu/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>GIT Flow流程管理规范</title>
    <link href="leeblog.icu/2020/09/10/"/>
    <id>leeblog.icu/2020/09/10/</id>
    <published>2020-09-10T08:59:33.000Z</published>
    <updated>2020-10-15T14:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><blockquote><p>Git Flow Integration插件是基于git flow(开发流程管理模型)的idea插件。  </p></blockquote><p>git flow开发流程管理模型主要使用五类分支：  </p><ul><li>master 主分支:生产环境部署分支, master分支永远与生产环境部署的版本保持同步。  </li><li>develop 开发分支:永远是下一个版本中已开发完成的新特性的最新代码。 </li><li>feature/功能名称: 新功能开发分支,为具体某一新功能开发而存在的临时分支,开发完成后合并回develop分支,并删除。 </li><li>release/版本号:预上线分支,版本中所有功能开发完毕并合并到develop以后,从develop开出release分支进行整体测试，测试稳定后打上tag同时并入develop、master分支。  </li><li>hotfix/bug:生产环境bug修复分支,修复后双向合并到develop和master。   </li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><ul><li>Git Flow Integration依赖于本地git flow，所以先安装git flow软件包:  <blockquote><p>执行<code>git flow version</code> 检查是否已安装</p></blockquote><ul><li>Ubuntu or Debian安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install git-flow </span><br></pre></td></tr></table></figure></li><li>Archlinux 安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yaourt -S gitflow-avh </span><br></pre></td></tr></table></figure></li><li>Windows安装<br>请参考 <a href="https://juejin.im/post/6844903682027307022">Windows下gitflow的安装方法</a>  </li></ul></li><li>安装Idea插件<br>idea中<code>File</code>-&gt;<code>Setting</code>-&gt;<code>Plugins</code>搜索安装即可  <img src="https://s1.ax1x.com/2020/09/16/wc7rmd.png" width="100%">  </li></ul><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a><strong>插件使用</strong></h2><ol><li><p>安装并重启idea后,右下角出现<code>No Gitflow</code>  </p>  <img src="https://s1.ax1x.com/2020/09/16/wc7Imj.png" width="100%"></li><li><p>点击init repo进行初始化<br><em>注：git flow init之前请确保本地没有尚未提交的更改</em>  </p><img src="https://s1.ax1x.com/2020/09/16/wc7jcF.png" width="100%"></li><li><p>确认后git flow自动基于master创建并切换到develop分支，并在右下角gitflow中出现操作选项    </p><img src="https://s1.ax1x.com/2020/09/16/wcHp7R.png" width="100%"> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>新功能开发分支线（feature）</span><br><span class="line"><span class="bullet">* </span>开发版本bug修复线（bugfix）</span><br><span class="line"><span class="bullet">* </span>新版本发布线/预上线（release）</span><br><span class="line"><span class="bullet">* </span>生产版本bug修复线（hotfix）</span><br></pre></td></tr></table></figure></li><li><p>开始使用，开发系统管理模块  </p><img src="https://s1.ax1x.com/2020/09/16/wcHVje.png" width="100%"></li><li><p>确认后自动生成feature为前缀的开发分支，并提供以下操作  </p><img src="https://s1.ax1x.com/2020/09/16/wcHQ4P.jpg" width="70%"></li></ol><p><code>Finish feature</code> 结束分支：合并当前开发分支至develop并删除当前开发分支<br><code>Publish feature</code>推送分支至远程仓库</p><h2 id="扩-分支管理详细"><a href="#扩-分支管理详细" class="headerlink" title="扩:分支管理详细"></a>扩:分支管理详细</h2><ul><li>master<ul><li>主分支, 随项目一直存在的长期分支.</li><li>master分支HEAD所在的位置, 永远是当前生产环境的代码.</li><li>master分支不允许直接提交代码, 仅允许从release或者hotfix分支通过merge request合并代码.</li></ul></li><li>develop<ul><li>开发分支, 随项目一直存在的长期分支.</li><li>develop分支的HEAD所在的位置, 永远是下一个版本中已开发完成的新特性的最新代码.</li><li>develop分支的代码每天自动构建并部署到测试环境.</li><li>develop分支不允许直接提交代码, 仅允许从feature, release或者hotfix分支通过merge request合并代码.</li><li>当develop分支中下一个版本的新特性已经全部开发完毕后, 从develop分支开出release分支, 进入测试阶段.</li><li>在下个版本的release分支创建之前, 非下个版本的feature分支不允许向develop分支合并.</li></ul></li><li>feature分支<ul><li>feature分支是一类以feature/为前缀(gitflow默认值, 可以更换)的分支的统称.</li><li>每一个feature分支从develop分支新建, 进行<strong>某一个功能</strong>的开发. 功能开发并测试稳定后, feature分支将合并回develop分支.</li><li>同一个人可以同时开发多个feature分支, 同一个feature分支也可以同时被多个人开发.</li><li>多个feature同时开发的情形, 后开发完的分支在最后合并回develop时, 往往会遇到冲突的情况. 此时一般遵循一下两种方法解决冲突.<ul><li>先将最新的develop分支向当前feature分支进行合并, 然后再将当前feature分支合并回develop.</li><li>先将当前的feature分支向最新的develop分支进行rebase, 然后再将当前feature分支合并回develop.</li><li>两种方式的比较, 可以参考文章Merging vs. Rebasing, 或其中文版代码合并：Merge、Rebase 的选择</li></ul></li></ul></li><li>release分支<ul><li>release分支是一类以release/为前缀(gitflow默认值, 可以更换)的分支的统称.</li><li>develop分支上的下一个版本的所有新特性开发完毕, 从develop分支开出一个该版本的release分支, 并进行测试.</li><li>release分支不允许进行新特性开发, 而只进行bug修复和更新版本mata信息(如版本号, 构建日期, 更新日志等), 并且可以不定期将新的bug修复改动合并回develop.</li><li>当release充分测试稳定后, 同时合并进入master分支和develop分支, 并在master分支上的建议该release版本的TAG.</li></ul></li><li>hotfix分支<ul><li>当生产环境发现紧急bug时，可以通过新建hotfix分支，来修复bug, 修复后双向合并到develop和master.  </li></ul></li></ul><h2 id="更多可参考"><a href="#更多可参考" class="headerlink" title="更多可参考:"></a>更多可参考:</h2><p><a href="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow">git-flow 的工作流程| Learn Version Control with Git</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">Git 工作流程- 阮一峰的网络日志</a><br><a href="https://zhuanlan.zhihu.com/p/153459671">git flow使用规范</a></p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2020/09/10/">leeblog.icu/2020/09/10/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">Git Flow Integration插件是基于git flow(开发流程管理模型)的idea插件。</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="GIT" scheme="leeblog.icu/tags/GIT/"/>
    
    <category term="开发规范" scheme="leeblog.icu/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法与Pandoc转换</title>
    <link href="leeblog.icu/2020/09/08/"/>
    <id>leeblog.icu/2020/09/08/</id>
    <published>2020-09-08T09:02:59.000Z</published>
    <updated>2022-04-28T02:18:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言： markdown极简主义标记语言，能帮我们进行便捷的文字排版，文档写作居家必备。<br>语法比较简单，本文不再作过多赘述。重点是pandoc，pandoc是约翰麦克法兰（一位伯克利哲学系的教授）开发的一个文本转换工具，<br>能帮我们将md文件转换为word、pdf、html，甚至ppt，当然，不止如此，你能想到的它都可以做到，号称文档转换界的瑞士军刀。</p></blockquote><h1 id="文本标记语言-Markdown"><a href="#文本标记语言-Markdown" class="headerlink" title="文本标记语言 Markdown"></a>文本标记语言 <code>Markdown</code></h1><blockquote><p>最流行的轻量<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/5964436?fr=aladdin">文本标记语言</a></p></blockquote><h2 id="常用语法："><a href="#常用语法：" class="headerlink" title="常用语法："></a>常用语法：</h2><img src="https://s1.ax1x.com/2020/09/16/wcHHDH.png" width="100%"><h2 id="更多请参考"><a href="#更多请参考" class="headerlink" title="更多请参考"></a>更多请参考</h2><p><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程| 菜鸟教程</a></p><hr><h1 id="标记语言转换工具Pandoc"><a href="#标记语言转换工具Pandoc" class="headerlink" title="标记语言转换工具Pandoc"></a>标记语言转换工具<code>Pandoc</code></h1><ul><li><p><strong>简介</strong> </p><blockquote><p><a href="https://pandoc.org/">Pandoc</a> 是由<a href="https://johnmacfarlane.net/macfarlane-cv.html">John MacFarlane</a> 开发的标记语言转换工具，可实现不同标记语言间的格式转换，堪称该领域中的“瑞士军刀”。  </p></blockquote><img src="https://s1.ax1x.com/2020/09/16/wcbFVs.jpg" width="10%"> </li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><ul><li>点击进入二进制包<a href="https://github.com/jgm/pandoc/releases/tag/2.10.1">下载页面</a> 选取对应包下载安装即可  </li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h2><ul><li><p>markdown转word  </p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">pandoc</span> <span class="selector-tag">git-extend</span><span class="selector-class">.md</span>  <span class="selector-tag">-o</span> <span class="selector-tag">md_convert_doc</span><span class="selector-class">.docx</span></span><br></pre></td></tr></table></figure></li><li><p>markdown转html</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">pandoc</span> <span class="selector-tag">git-extend</span><span class="selector-class">.md</span>  <span class="selector-tag">-o</span> <span class="selector-tag">md_convert_html</span><span class="selector-class">.html</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2020/09/08/">leeblog.icu/2020/09/08/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">markdown极简主义标记语言，能帮我们进行便捷的文字排版，文档写作居家必备。pandoc是约翰麦克法兰（一位伯克利哲学系的教授）开发的一个文本转换工具</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="工具" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="leeblog.icu/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="文档" scheme="leeblog.icu/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Maven插件之git-commit-id</title>
    <link href="leeblog.icu/2020/09/05/"/>
    <id>leeblog.icu/2020/09/05/</id>
    <published>2020-09-05T09:00:58.000Z</published>
    <updated>2022-04-28T02:18:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven插件-git-commit-id-plugin"><a href="#Maven插件-git-commit-id-plugin" class="headerlink" title="Maven插件 git-commit-id-plugin"></a>Maven插件 <code>git-commit-id-plugin</code></h1><blockquote><p>让我们通过接口就晓得后台代码的版本。    </p></blockquote><p>该插件会在源码编译打包时生成git版本信息、打包信息，便于后期运维。</p><h2 id="git-commit-id-plugin-使用"><a href="#git-commit-id-plugin-使用" class="headerlink" title="git-commit-id-plugin 使用"></a><a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">git-commit-id-plugin</a> 使用</h2><ul><li><p>pom文件引入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>pl.project13.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>git-commit-id-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generateGitPropertiesFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generateGitPropertiesFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">injectAllReactorProjects</span>&gt;</span>true<span class="tag">&lt;/<span class="name">injectAllReactorProjects</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>重新打包，jar包中自动生成<code>git.properties</code>文件，如下：  </p><img src="https://s1.ax1x.com/2020/09/16/wcHBCV.png" width="100%"></li><li><p>编写项目版本信息查询接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> GitProperties gitProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/version&quot;)</span></span><br><span class="line"><span class="function">HashMap&lt;String, String&gt; <span class="title">version</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, String&gt; versionInfo = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">    versionInfo.put(<span class="string">&quot;branch&quot;</span>, gitProperties.getBranch());</span><br><span class="line">    versionInfo.put(<span class="string">&quot;commitId&quot;</span>, gitProperties.getCommitId());</span><br><span class="line">    versionInfo.put(<span class="string">&quot;commitMessage&quot;</span>, gitProperties.get(<span class="string">&quot;commit.message.full&quot;</span>));</span><br><span class="line">    versionInfo.put(<span class="string">&quot;commitUser&quot;</span>, gitProperties.get(<span class="string">&quot;commit.user.name&quot;</span>));</span><br><span class="line">    versionInfo.put(<span class="string">&quot;commitTime&quot;</span>, DateUtil.date(Long.parseLong(gitProperties.get(<span class="string">&quot;commit.time&quot;</span>))).toString());</span><br><span class="line">    versionInfo.put(<span class="string">&quot;buildHost&quot;</span>, gitProperties.get(<span class="string">&quot;build.host&quot;</span>));</span><br><span class="line">    versionInfo.put(<span class="string">&quot;buildUser&quot;</span>, gitProperties.get(<span class="string">&quot;build.user.name&quot;</span>));</span><br><span class="line">    versionInfo.put(<span class="string">&quot;buildTime&quot;</span>, DateUtil.date(Long.parseLong(gitProperties.get(<span class="string">&quot;build.time&quot;</span>))).toString());</span><br><span class="line">    <span class="keyword">return</span>  versionInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请求接口  </p><img src="https://s1.ax1x.com/2020/09/16/wcHRER.png" width="100%"></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>springBoot 2.3.0之后的版本无法直接注入GitProperties，<br>需要在启动类声明GitProperties类的Bean属性。</li></ul><h2 id="更多请参考"><a href="#更多请参考" class="headerlink" title="更多请参考"></a>更多请参考</h2><p><a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">该插件的github</a></p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2020/09/05/">leeblog.icu/2020/09/05/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">让我们通过接口就晓得后台代码的版本。该插件会在源码编译打包时生成git版本信息、打包信息，便于后期运维。</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="工具" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="GIT" scheme="leeblog.icu/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>Java三页代码之——实现Mysql透明加解密</title>
    <link href="leeblog.icu/2020/08/16/"/>
    <id>leeblog.icu/2020/08/16/</id>
    <published>2020-08-16T07:14:18.000Z</published>
    <updated>2022-04-28T02:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间有项目需求做个简单的数据加密，根据开发成本和程序性能综合考虑，<br>最终选定利用mysql加解密函数进行实现。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>项目sql执行前进行拦截，如果包含加密字段则对sql进行字符串截取拼接处理，<br>不同类型不同处理方式：  </p><ul><li>select类型：select字段拼上解密函数及密钥</li><li>insert类型：insert对应字段值拼上加密函数及密钥</li><li>delete类型：对应字段where条件值拼上加密函数及密钥</li><li>update类型：update对应字段值拼上加密字段及密钥，对应字段where条件值拼上加密函数及密钥</li></ul><h2 id="用到的第三方工具包"><a href="#用到的第三方工具包" class="headerlink" title="用到的第三方工具包"></a>用到的第三方工具包</h2><p><a href="https://hutool.cn/">HuTool</a> (一个小而美的java工具包)  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><ul><li><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lee.blog.config.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lizhuo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//要加密的字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FIELD = </span><br><span class="line">                  Arrays.asList(<span class="string">&quot;card_no&quot;</span>, <span class="string">&quot;card_key&quot;</span>, <span class="string">&quot;card_private_no&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SALT = <span class="string">&quot;\&quot;bc7a5744-fbf0-5288-c20e-e87ea9ee1ba0\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENC_PREFIX = <span class="string">&quot;HEX(ENCODE(&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENC_SUFFIX = <span class="string">&quot;,&quot;</span> + SALT + <span class="string">&quot;))&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEC_PREFIX = <span class="string">&quot;DECODE(UNHEX(&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEC_SUFFIX = <span class="string">&quot;),&quot;</span> + SALT + <span class="string">&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AS = <span class="string">&quot;AS&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SELECT = <span class="string">&quot;SELECT&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FROM = <span class="string">&quot;FROM&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mybatise拦截类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lee.blog.config.mybatis;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ReflectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.RoutingStatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lizhuo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123;Connection.class, Integer.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrepareInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INSERT = <span class="string">&quot;INSERT&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (invocation.getTarget() <span class="keyword">instanceof</span> RoutingStatementHandler handler) &#123;</span><br><span class="line">            StatementHandler delegate =</span><br><span class="line">                    (StatementHandler) ReflectUtil.getFieldValue(handler, <span class="string">&quot;delegate&quot;</span>);</span><br><span class="line">            BoundSql boundSql = delegate.getBoundSql();</span><br><span class="line">            <span class="keyword">final</span> String sql = boundSql.getSql();</span><br><span class="line">            <span class="keyword">if</span> (needHandler(sql)) &#123;</span><br><span class="line">                handlerSql(boundSql);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlerSql</span><span class="params">(BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String result = SQLUtils.format(boundSql.getSql(), JdbcConstants.MYSQL);</span></span><br><span class="line">        String sql = replaceSql(boundSql.getSql());</span><br><span class="line">        <span class="keyword">switch</span> (sql.substring(<span class="number">0</span>, <span class="number">6</span>).toUpperCase()) &#123;</span><br><span class="line">            <span class="keyword">case</span> EncConfig.SELECT -&gt; sql = handlerQuerySql(sql);</span><br><span class="line">            <span class="keyword">case</span> INSERT -&gt; sql = handlerInsertSql(sql);</span><br><span class="line">            <span class="keyword">default</span> -&gt; sql = handlerDeleteOrUpdateSql(sql);</span><br><span class="line">        &#125;</span><br><span class="line">        ReflectUtil.setFieldValue(boundSql, <span class="string">&quot;sql&quot;</span>, sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">handlerDeleteOrUpdateSql</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sql(sql).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">handlerQuerySql</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sql(sql).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">handlerInsertSql</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; insertFiled = Arrays.asList(</span><br><span class="line">                sql.substring(sql.indexOf(<span class="string">&quot;(&quot;</span>) + <span class="number">1</span>, sql.indexOf(<span class="string">&quot;)&quot;</span>)).split(StrUtil.COMMA));</span><br><span class="line">        String insertValueStr = sql.substring(sql.lastIndexOf(<span class="string">&quot;(&quot;</span>) + <span class="number">1</span>, sql.lastIndexOf(<span class="string">&quot;)&quot;</span>));</span><br><span class="line">        List&lt;String&gt; insertValue = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(</span><br><span class="line">                insertValueStr.split(StrUtil.COMMA)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; insertFiled.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> Optional&lt;String&gt; any = EncConfig.FIELD.stream().filter(insertFiled.get(i)::contains).findAny();</span><br><span class="line">            <span class="keyword">if</span> (any.isPresent()) &#123;</span><br><span class="line">                insertValue.set(i, EncConfig.ENC_PREFIX + insertValue.get(i) + EncConfig.ENC_SUFFIX);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> replaceSql(sql, insertValueStr, insertValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">replaceSql</span><span class="params">(String sql, String resourceStr, List&lt;String&gt; targetStrList)</span> </span>&#123;</span><br><span class="line">        AtomicReference&lt;String&gt; targetQueryFiledStr = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        targetStrList.forEach(i -&gt; targetQueryFiledStr.set(</span><br><span class="line">                StringUtils.isBlank(targetQueryFiledStr.get()) ?</span><br><span class="line">                        targetQueryFiledStr + i : targetQueryFiledStr + StrUtil.COMMA + i));</span><br><span class="line">        sql = sql.replace(resourceStr, targetQueryFiledStr.get());</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">needHandler</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EncConfig.FIELD.stream().anyMatch(sql::contains);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤特殊字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">replaceSql</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        sql = sql.replaceAll(<span class="string">&quot;\\n&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        sql = sql.replaceAll(<span class="string">&quot;\\t&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>sql转换类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lee.blog.config.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span>  com.lee.blog.config.mybatis.EncConfig.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lizhuo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sql</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String execType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;QueryField&gt; queryField;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remainder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sql</span><span class="params">(String sqlStr)</span> </span>&#123;</span><br><span class="line">        StringBuilder sql = <span class="keyword">new</span> StringBuilder(sqlStr);</span><br><span class="line">        <span class="keyword">this</span>.execType = sql.substring(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!SELECT.equalsIgnoreCase(execType)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.remainder = sql.substring(<span class="number">6</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fromIndex = StringUtils.indexOfIgnoreCase(sql, FROM);</span><br><span class="line">        <span class="comment">//解析并赋值对象</span></span><br><span class="line">        String queryFieldStr = sql.substring(<span class="number">6</span>, fromIndex);</span><br><span class="line">        <span class="keyword">boolean</span> has = EncConfig.FIELD.stream().anyMatch(queryFieldStr::contains);</span><br><span class="line">        <span class="keyword">if</span> (has) &#123;</span><br><span class="line">            List&lt;String&gt; queryField = Arrays.asList(queryFieldStr.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">            List&lt;QueryField&gt; field = <span class="keyword">new</span> ArrayList&lt;&gt;(queryField.size());</span><br><span class="line">            queryField.forEach(i -&gt; field.add(<span class="keyword">new</span> QueryField(i)));</span><br><span class="line">            <span class="keyword">this</span>.queryField = field;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.queryField = Collections.singletonList(<span class="keyword">new</span> QueryField(queryFieldStr));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.remainder = sql.substring(fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sql = <span class="keyword">new</span> StringBuilder(execType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(queryField)) &#123;</span><br><span class="line">            queryField.forEach(i -&gt; sql.append(i.toString()).append(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">            sql.setCharAt(sql.length() - <span class="number">1</span>, <span class="string">&quot; &quot;</span>.charAt(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EncConfig.FIELD.forEach(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (remainder.contains(i + <span class="string">&quot; = ?&quot;</span>)) &#123;</span><br><span class="line">                remainder = remainder.replace(i + <span class="string">&quot; = ?&quot;</span>,</span><br><span class="line">                        i + <span class="string">&quot; = &quot;</span> + EncConfig.ENC_PREFIX + <span class="string">&quot;?&quot;</span> + EncConfig.ENC_SUFFIX);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (remainder.contains(i + <span class="string">&quot; in&quot;</span>) || remainder.contains(i + <span class="string">&quot; not in&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                String substring = remainder.substring(</span><br><span class="line">                        remainder.indexOf(i + <span class="string">&quot; in (&quot;</span>) + (i + <span class="string">&quot; in (&quot;</span>).length());</span><br><span class="line"></span><br><span class="line">                String valueStr = substring.substring(<span class="number">0</span>, substring.indexOf(<span class="string">&quot;)&quot;</span>));</span><br><span class="line"></span><br><span class="line">                remainder = remainder.replace(valueStr,</span><br><span class="line">                        valueStr.replace(<span class="string">&quot;?&quot;</span>,</span><br><span class="line">                                EncConfig.ENC_PREFIX + <span class="string">&quot;?&quot;</span> + EncConfig.ENC_SUFFIX));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        sql.append(remainder);</span><br><span class="line">        <span class="keyword">return</span> sql.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String field;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String function;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String alias;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">QueryField</span><span class="params">(String field)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> anyMatch = EncConfig.FIELD.stream().anyMatch(field::contains);</span><br><span class="line">            <span class="keyword">if</span> (!anyMatch) &#123;</span><br><span class="line">                <span class="keyword">this</span>.field = field;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> hasFunction = field.contains(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (hasFunction) &#123;</span><br><span class="line">                <span class="keyword">int</span> lastIndexOfStart = field.lastIndexOf(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> lastIndexOfEnd = field.lastIndexOf(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.function = field.substring(<span class="number">0</span>, lastIndexOfStart) + <span class="string">&quot;(@function@)&quot;</span></span><br><span class="line">                        + field.substring(lastIndexOfEnd + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                field = field.substring(lastIndexOfStart + <span class="number">1</span>, lastIndexOfEnd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> hasAlias = StringUtils.containsIgnoreCase(field, AS);</span><br><span class="line">            <span class="keyword">boolean</span> hasPrefix = field.contains(StrUtil.DOT);</span><br><span class="line">            <span class="keyword">if</span> (hasAlias) &#123;</span><br><span class="line">                <span class="keyword">this</span>.alias = field.substring(StringUtils.indexOfIgnoreCase(field, AS) + <span class="number">2</span>);</span><br><span class="line">                field = field.substring(<span class="number">0</span>, StringUtils.indexOfIgnoreCase(field, AS));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.alias = AS + <span class="string">&quot; &quot;</span> + (hasPrefix ?</span><br><span class="line">                        field.substring(field.indexOf(StrUtil.DOT) + <span class="number">1</span>) : field);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.field = field;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> anyMatch = EncConfig.FIELD.stream().anyMatch(field::contains);</span><br><span class="line">            field = anyMatch ? EncConfig.DEC_PREFIX + field + EncConfig.DEC_SUFFIX : field;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> StringUtils.isEmpty(function) ? field + (alias == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : alias)</span><br><span class="line">                    : function.replace(<span class="string">&quot;@function@&quot;</span>, field) + (alias == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><em>ps</em> ：</p><ul><li><p>拦截处理并不支持SELECT * 语句,不建议项目中使用SELECT *； </p></li><li><p>项目中如果没有单独mybatis配置类的话，拦截器默认生效，如果包含配置类则需在配置类中指定开启</p></li></ul><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2020/08/16/">leeblog.icu/2020/08/16/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">前段时间有项目需求做个简单的数据加密，根据开发成本和程序性能综合考虑，最终选定利用mysql加解密函数进行实现。</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="代码" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="java" scheme="leeblog.icu/tags/java/"/>
    
    <category term="x页代码" scheme="leeblog.icu/tags/x%E9%A1%B5%E4%BB%A3%E7%A0%81/"/>
    
    <category term="代码" scheme="leeblog.icu/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java一页代码之——实现微信自动智能回复</title>
    <link href="leeblog.icu/2020/07/10/"/>
    <id>leeblog.icu/2020/07/10/</id>
    <published>2020-07-10T07:25:48.000Z</published>
    <updated>2022-05-23T07:31:33.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>机器可以替代我们自动打开空调，可以替代我们洗碗拖地，甚至替代我们开车(真开车，别多想)，<br>现在，它还可以替我们聊天，是的，它说：Yes，I do!</p></blockquote><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><h3 id="实现效果先看一眼："><a href="#实现效果先看一眼：" class="headerlink" title="实现效果先看一眼："></a>实现效果先看一眼：</h3><p>【这个enmm暂时还没有，因为没人给俺发消息】 </p><h3 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h3><ol><li>利用微信网页端接口登陆微信并监听消息</li><li>收到消息后请求图灵智能机器人api接口获得智能回复消息内容</li><li>通过微信接口回复智能消息</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><p>maven引入包</p><ul><li>wechat-api (来自<a href="https://github.com/biezhi/wechat-api">biezhi的github</a>)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.biezhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wechat-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><a href="https://hutool.cn/">HuTool</a> (一个小而美的java工具包)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>一页代码（俺贴心的给你们设置了白名单机制，在哪儿设置自己找）</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lee.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> io.github.biezhi.wechat.WeChatBot;</span><br><span class="line"><span class="keyword">import</span> io.github.biezhi.wechat.api.annotation.Bind;</span><br><span class="line"><span class="keyword">import</span> io.github.biezhi.wechat.api.constant.Config;</span><br><span class="line"><span class="keyword">import</span> io.github.biezhi.wechat.api.enums.MsgType;</span><br><span class="line"><span class="keyword">import</span> io.github.biezhi.wechat.api.model.WeChatMessage;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloBot</span> <span class="keyword">extends</span> <span class="title">WeChatBot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloBot</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; notRec=Arrays.asList(<span class="string">&quot;老聂&quot;</span>,<span class="string">&quot;老黄&quot;</span>);</span><br><span class="line">    <span class="meta">@Bind(msgType = MsgType.TEXT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleText</span><span class="params">(WeChatMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(message.getName())</span><br><span class="line">                &amp;&amp;!message.isGroup()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到 [&quot;</span>+message.getName()+<span class="string">&quot;] 的消息: &quot;</span></span><br><span class="line">                                                  +message.getText());</span><br><span class="line">             String mSg =<span class="string">&quot;我可能有点问题,等会回复你噢&quot;</span>;</span><br><span class="line">             <span class="keyword">if</span>(!notRec.contains(message.getFromRemarkName())) &#123;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                     mSg = getReply(message.getText());</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                     System.out.println(e.getMessage());</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">this</span>.sendMsg(message.getFromUserName(), mSg );</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">String <span class="title">getReply</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String param=<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;perception\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;inputText\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;text\&quot;: \&quot;MSG\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;userInfo\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;apiKey\&quot;: \&quot;608df9e00ab648ac91968a20b11dba3f\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;userId\&quot;: \&quot;635279\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String body = HttpRequest.post(<span class="string">&quot;https://openapi.tuling123.com/openapi/api/v2&quot;</span>)</span><br><span class="line">                .body(JSONUtil.parse(param.replace(<span class="string">&quot;MSG&quot;</span>,msg)).toString())</span><br><span class="line">                .execute().body();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.parseObj(body).getByPath(<span class="string">&quot;results[0].values.text&quot;</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HelloBot(Config.me().autoLogin(<span class="keyword">true</span>).showTerminal(<span class="keyword">true</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：里面图灵接口的请求参数apiKey及userId是俺在<a href="http://www.turingapi.com/">图灵API</a> 注册获取的，有需要可自己去注册。</p><h2 id="更多翻车栗子"><a href="#更多翻车栗子" class="headerlink" title="更多翻车栗子"></a>更多翻车栗子</h2><p><a href="https://www.pianshen.com/article/96801052825/">微信自动回复 | 如何智能秒回女朋友 - 程序员大本营</a></p></li></ul><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2020/07/10/">leeblog.icu/2020/07/10/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">机器可以替代我们自动打开空调，可以替代我们洗碗拖地，甚至替代我们开车(真开车，别多想)，现在，它还可以替我们聊天，是的，它说：Yes，I do!</summary>
    
    
    
    <category term="技术" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="代码" scheme="leeblog.icu/categories/%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="java" scheme="leeblog.icu/tags/java/"/>
    
    <category term="x页代码" scheme="leeblog.icu/tags/x%E9%A1%B5%E4%BB%A3%E7%A0%81/"/>
    
    <category term="wechat" scheme="leeblog.icu/tags/wechat/"/>
    
    <category term="代码" scheme="leeblog.icu/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>北京的雪</title>
    <link href="leeblog.icu/2019/11/30/"/>
    <id>leeblog.icu/2019/11/30/</id>
    <published>2019-11-30T14:47:45.000Z</published>
    <updated>2022-05-23T03:38:47.197Z</updated>
    
    <content type="html"><![CDATA[<p>上午就听人说今天会下雪，于是便已经隐隐盼着了。</p><p>北京上一年一整个冬天都是没有雪的，只是凌冽而干燥的风直直的吹着，吹起了大兴的一场大火，吹走了这个城市无数漂泊的人。</p><p>下午四五点，便看到昌平、延庆的朋友发的动态，下雪了、下雪了。真让人艳羡，恨不能钻进屏幕、走进去、走进去。</p><p>然后便是听得身边的人陆陆续续的谣传，“嘿外面下了”，“哦下了么？”。然而是没有的，我一次次趴着窗户去看楼下一杵杵路灯，窗玻璃上被呼吸嘘满白气，似乎要硬生生的从眼里生出一片片雪花来。然而什么也没有。</p><p>我想起了我们的园艺师，那个一直披着黑色的长长的几乎垂地的风衣，穿梭在长长的走廊里照料这里花草的女人。我一直想她大概是个魔法师，或者是女巫，反正绝不只是一个园艺师，无论怎样，她都是一个神秘的人。</p><p>也许她能变出雪来。</p><p>下午六点，同事们陆陆续续下班了，回家看雪去了，“周一见”，“周一见！”。我想，没有雪，也没有女巫，大概西城是不会有雪了。</p><p>晚上八点，刚从游泳池哆哆嗦嗦爬出来，便听老马说外面下雪了。“下了！”，“下了？”，“下了！”，马爷是个老实人，他一直在这儿勤勤恳恳尽职尽责的照料泳池，我知道这次是真的下了。</p><p>于是急急忙忙的冲个澡，换衣服。看了眼窗外，不大，但真的下了。我那个号称防风防雨防霜防雪甚至防冰雹的、加长加厚加宽加大的羽绒服在此时有了用武之地。裹上衣服、叼上根烟，头发顾不上扎了，就那么披头散发的跑了出去。</p><p>下了,不仅下了，而且越下越大，天空毫不吝啬的撒下一簇簇雪花，整个街区洋溢着欢快的气氛，整个西城洋溢着欢快的气氛，整个北京洋溢着快乐。</p><p>有人在车上的雪面上画下日期，有人在路灯下迎着雪花紧紧相拥，有人醉了，有人醒着，有人在奔跑，有人在骑车，有人漫步于此、他的身后，跟着条同样年迈而淡定的狗。</p><p>此时京城，无关政治、无关苟且，也无关千秋大业万丈红尘，只有当下的雪月风花，只剩下美，只剩下爱。</p><p align="right">写于西城太仆寺街xx号</p> <p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2019/11/30/">leeblog.icu/2019/11/30/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">我想起了我们的园艺师，那个一直披着黑色的长长的几乎垂地的风衣，穿梭在长长的走廊里照料这里花草的女人</summary>
    
    
    
    <category term="随笔" scheme="leeblog.icu/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="leeblog.icu/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>正经人不写日记</title>
    <link href="leeblog.icu/2019/09/17/"/>
    <id>leeblog.icu/2019/09/17/</id>
    <published>2019-09-17T14:45:20.000Z</published>
    <updated>2022-05-23T03:27:28.986Z</updated>
    
    <content type="html"><![CDATA[<p>九月十七日。胸肌开始有了点儿弧度，胳膊上的N头肌明显硬实了，但是并没有明显增肌，腹部肌肉没有明显变化。</p><p>老黄要转行了，不知道面试怎么样。前些天他推荐的那本书看完了，我并不看好。无非是东拼西凑哗众取宠，但还是用沉默结束了我们的争论。</p><p>表弟有了女朋友，大表姐二表姐专程来北京“把关”，他们来那天，我在后海陪大爷演奏，从黄昏到夜幕降临。</p><p>我妈打电话，说你舅你舅妈都好满意，说我虽然不着急但也要先瞅着，我说你儿子忙着星辰大海呢，没空恋爱。可我还是为我舅感到高兴，我能想到他那种幸福满足的笑意。</p><p>朋友又辞职了，他说生活好难啊，我无言以对。其实我想说生活确实很难，但你那不过是生存而已，有些人努力勤奋一辈子，也注定只是个努力且勤奋的普通人。</p><p>可是我不能这么说，只能等我们自己头破血流后顿悟，也包括自己。</p><p>晚安。</p><p>我有些想我的小仓鼠了。</p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2019/09/17/">leeblog.icu/2019/09/17/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">前些天他推荐的那本书看完了，我并不看好。无非是东拼西凑哗众取宠，但还是用沉默结束了我们的争论</summary>
    
    
    
    <category term="随笔" scheme="leeblog.icu/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="leeblog.icu/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>寻三儿启事</title>
    <link href="leeblog.icu/2019/09/01/"/>
    <id>leeblog.icu/2019/09/01/</id>
    <published>2019-09-01T10:22:06.000Z</published>
    <updated>2020-10-08T01:41:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 三儿啊，我们永远不知道哪次是这辈子最后一次</p></blockquote><p>三儿，原名张自清，少白头，常擎富光最大号杯子牛饮，平日寡言少语。</p><p>三儿为什么叫三儿，我早已忘了。结识他，已有十年。我丝毫不怀疑，他是我人生的第一个导师。如此称呼，当然不止因为我在他那第一次欣赏到了毛片。</p><p>我们是初中同学，我俩家就在博宇中学后边的沙果园，隔着两条街，却从未结识，直到初中。</p><p>初中，十一二岁，那时青春懵懂，最幼稚，也最哲学。内向敏感，很少说话。一次突觉自己生命之无意义，思而不得，困苦的厉害。一晚，终于鼓起勇气求助于能给我答案的政治思想老师，我说，老师，人为什么活着？人类日复一日存在的终极意义在哪儿？ </p><p>她推着自行车，显得好惊讶，她想了好久，说了好多。却最终没有足以让当时的我信服的答案。现在回头看，千百年来层出不穷的哲学家们也没有答案。我绝望极了。</p><p>三儿有个和我一样严厉的医生爸爸，三儿身上总有一股雕牌肥皂的味道，很好闻。后来我才知道，他一天最少五次洗手，每次洗手都会用肥皂，他说，洗手不用雕牌的肥皂简直相当于白洗。我总肆虐的想，是不是他爸爸小时候也骗他饭前不洗手就会死掉。 </p><p>三儿比我，比我们老成多了，他在班级里拿富光最大号杯子喝水、在班里少言寡语，噢对了，他还有少白头，这一切让我觉得他是个深不可测的人物。</p><p>对，那个放学铃不断回荡的晚上我抛给政治老师的问题，没有得到满意的答案后，抛给了他。他显得一脸鄙夷，喝完了一大杯富光水。终于说，没有特么的意义，生物本能懂么？ </p><p>我自然没太懂，但对他这么直接了当的回答显得满意极了。放学时，他又淡淡的补了一句，周末来我家。</p><p>我去了，他带我去了他的秘密基地，一个离他家不远、胡同深处废弃的院子，荒草丛生，推开正屋的门，偏厅放着一台电脑。还有一个落满灰尘书架。大白天都阴森森的可怕。然后在那个周末，在那个电脑旁，我第一次目睹了什么叫生物本能。</p><p>他问我，理解了么？我说，有点儿恶心。</p><p>大概在那时我的青春期开始了。</p><p> 后来，后来啊，我发现三儿不止对毛片有见解，政治、历史同样头头是道且有着自己独特见解。在那个春夏秋冬，我带他成了新华书店的常客，他带我找遍了黑网吧。</p><p> 但是三儿从没有、也从不用当时流行的QQ。</p><p> 最后两三次，最后两三次分别时，我每次都会对他说：三儿啊，我们永远不知道哪次是这辈子最后一次。然后颤巍巍掏出早已写好的纸条。简直泪眼婆娑的对他说，这是我QQ号，那天你想开了有了QQ，就加我。</p><p> 后来随着老城区改造，再也杳无音讯。</p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2019/09/01/">leeblog.icu/2019/09/01/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">最后两三次，最后两三次分别时，我每次都会对他说：三儿啊，我们永远不知道哪次是这辈子最后一次。然后颤巍巍掏出早已写好的纸条...</summary>
    
    
    
    <category term="随笔" scheme="leeblog.icu/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="leeblog.icu/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>多多</title>
    <link href="leeblog.icu/2019/06/14/"/>
    <id>leeblog.icu/2019/06/14/</id>
    <published>2019-06-14T15:50:30.000Z</published>
    <updated>2022-05-23T03:25:40.130Z</updated>
    
    <content type="html"><![CDATA[<p>二零一九年，六月十四日。</p><p>今天周五，晚上与老高约了去撸串，店外面的桌椅似乎坐满了人，于是与老板说了一通，最终搬屋里一张桌子出来。</p><p>周边有两个嬉耍的小朋友，见我们搬了桌子出来，似乎盯了我一眼，似乎私占了他们的领土。刚要写菜单，却发现没有笔，抬头四顾，不一会儿便见刚刚的一个小朋友拿了支笔出来，这才细细看了眼，短发，大眼睛，肉嘟嘟，大概七八岁的样子，甚是可爱。我想这大概便是老板的女儿了。</p><p>饮酒过半，桌上餐巾纸没了，我看那小朋友的小伙伴不知何时被家长领走，一个人自己在那无所事事，便有意逗她，招她来说，“兄弟，这餐巾纸没了”，她犹豫了下，似乎装作不情愿似的，拿上纸盒便往屋里走。不一会儿，便随着店员屁股后面慢悠悠的来了，”哈哈你太认真了，不必要拿纸盒装一下的”店员一边嬉笑她，一边拿着一摞餐巾纸过来放下，她忿忿不平，一双大眼睛忽闪忽闪的看着我，却也没说什么。我已有醉意，也一脸肆虐幸灾乐祸的看着她。</p><p>不一会儿，她像是报复一般，趁我碰杯时把我烟盒突然拿去，却发现那是个空盒，我不明就里，却更是开心，得意洋洋的看着她。然而我立即发现她的用意，因为她继而把我另一盒香烟夺去，然后跑出几米，更加得意洋洋的看着我，把那盒香烟放在了地上，我觉得好笑。只得起身去拿回来，还是放到了桌子上，仿佛等着她来拿一样。故意逗她，装作不注意，等她要来拿时，就立即攥在手里，使她不得逞。却防不住她，她又一次得手，且放到了更远的地方，我便又去捡。如此反复，直到我累的不愿再动，任她去放。她便来以胜利者的姿态来取笑我了：“就这么近你都不捡，你是老爷爷么”</p><p>我说“你说是，那就是吧，你赢了”；于是她笑了，极大声，像是被晚风摇着的银铃。又像是宣告胜利一样喊起来“老爷爷，长头发小胡子老爷爷”；惹得邻桌的几位姑娘纷纷侧目。我不免老脸一红，怕老板误会我占人便宜，便起身匆匆进店结账欲逃。出得店门来，老高又与她招呼，“我们走了呦小朋友”，她自然客客气气装作乖巧的跟他回应“再见”，却又瞧到随后的我，又大声喊道“再见，老爷爷”。吾自不敢应，落荒而逃，只听的身后大小姑娘一片笑声。</p><hr><p>后记：酒劲上来，便想听李志的歌《不多》，无奈本地并没下载，于是搜遍各大音乐平台，均见不得李志半点信息。心中便又一股悲哀。还是去了YouTube内心才得以快慰。</p><p>特附上歌词，以示怀念：</p><p>不多 - 李志<br>词：李志    曲：李志</p><p>多多你不要哭<br>长大你就会清楚<br>这世界没有人<br>对你真的在乎</p><p>多多你不要怕<br>我不会逼你学吉他<br>你是你我是我<br>各有各的想法</p><p>不久以后的某天<br>我就这样的老了<br>你不用装作多么的难过<br>你是你我是我<br>谁都难免会孤独<br>你是你我是我<br>谁都难免会寂寞</p><p>多多你别问我<br>生活到底是什么<br>他们人类没道理<br>我不懂的太多</p><p>多多你别害怕<br>如果你真的爱上他<br>用真心用真情<br>别管以后的结果</p><p>必然有那么一天<br>你就突然离开我<br>你不要装作多么的眷恋<br>你走吧你笑吧<br>你找寻你自己吧</p><p>也许不久的某天<br>我突然就离开你<br>你不要装作多么的眷恋<br>你走吧你笑吧<br>你找寻你自己吧<br>你走吧你笑吧<br>你找寻你自己吧 </p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2019/06/14/">leeblog.icu/2019/06/14/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">于是她笑了，极大声，像是被晚风摇着的银铃</summary>
    
    
    
    <category term="随笔" scheme="leeblog.icu/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="leeblog.icu/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>再见仓老师</title>
    <link href="leeblog.icu/2019/04/06/"/>
    <id>leeblog.icu/2019/04/06/</id>
    <published>2019-04-05T16:44:25.000Z</published>
    <updated>2020-10-07T07:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>等待即是希望，即是一切美好的开始</p></blockquote><p>北京今天的空气达到了PM 10 367重污染，窗外的山没了，夕阳没了，取而代之的是厚重而浑浊的霾。我转身看了看桌上胡乱摆着的闲书，庆幸自己没出去。</p><p>看书、订餐、摆弄好长时间没碰的画架、午休、发呆、看电影、然后打两把游戏，一切都是那么稀松平常，静谧平淡，毫无意外，就像那两把游戏，都毫无意外的输掉。</p><p>大概晚上九点，照常起身去储藏室喂仓鼠。然后看到，仓老师这次很乖，他趴在那，一动不动，他走了。我不太清楚自己在那一刻是怎样一种情绪状态，我好像再次看到了幼时趴在哪里一动不动的狗狗，好像又看到了安静的像是睡去的人。死亡，就这样立体直观的呈现在眼前。我蹲坐在那儿，一片茫然，不知所措。</p><p>似乎心里一直都在为这一天的到来准备着，从他来到我的生活里。这次，他真的走了。之前工作比较忙的时候，忙到需要直接就近睡酒店的时候，我想，我要回家，因为他在等我，我家里有牵挂，像是那些有家室的同事一样。这次，真的没了。</p><p>于是踉踉跄跄的滚回了卧室，坐在那儿缓了好一会儿。</p><p>沉默，沉默，一切寂静的不像话。</p><p>没哭。</p><p>我打定主意，要为他买朵花，与他一起葬进土里。不是因为他多么喜欢花，只是自私的为自己，为自己寻求一点安慰。</p><p>生命，自从诞生便开始死亡的过程，一分一秒，直至尽头。</p><p>我便顿时明白了，等待戈多，戈多即死神。</p><p>后来又觉得太直白而残酷，附上另一句：等待即是希望，即是一切美好的开始。以哄骗世人，同时忽悠自己走下去。我们别无选择。</p><p>把储藏室打扫干净。给他买的菜没喂完，就扔了。为他新买的小房子还没到，就退了。好像他从未来过，除了那朵花在微风中摇曳，直至凋零、枯去，化作春泥。</p><p>同日，我妈电话来兴奋的告知我：家里的狗子生了，三只小狗商量好似的都是黑黝黝的，尚未睁眼，很是可爱。唠叨着：再过几天定是满院子撒欢儿了。</p><p>一切美好的开始。  </p><p align="right" >一九年四月六日</p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2019/04/06/">leeblog.icu/2019/04/06/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">仓老师这次很乖，他趴在那，一动不动，他走了...死亡，就这样立体直观的呈现在眼前。我蹲坐在那儿，一片茫然，不知所措。</summary>
    
    
    
    <category term="随笔" scheme="leeblog.icu/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="leeblog.icu/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Jack</title>
    <link href="leeblog.icu/2019/03/10/"/>
    <id>leeblog.icu/2019/03/10/</id>
    <published>2019-03-10T10:39:20.000Z</published>
    <updated>2020-10-08T01:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jack洗完衣服，照常换了大裤衩、趿拉着拖鞋出门了，找了个有信号的地方，点着烟。他看着列表里的Lucy，琢磨着发点啥，可他琢磨来琢磨去，没想出什么，Lucy反而在这时一条消息提示，“xxxxxxx，xxx”，Jack盯着这条信息，有些不太相信。他愣了半天，又狠狠的抽了一口，他想发个表情，大概可以掩饰一下自己的尴尬与不知所措，却没有得逞，“对方拒收了您的消息”。Jack看着这个夜晚，有颗很亮很亮的星，只有一颗，眨呀眨的。</p><p>jack抽完第二棵宏图便回去了，家里的烟他有些抽不惯了，没有的时候却想。摸摸裤兜的钥匙，开门。jack坐在床角，无数次他都一个人这么静静的坐着，好像什么都没想过，好像想了好多。竟有些享受这种滋味呢，jack想着。不一会儿，便躺下睡了。</p><p>这是Jack睡的最早的一个晚上，也是睡的最长的一个觉，没人不知道那天梦里他去了哪。没人关心这一切。</p><p align="right" >摘自某刊</p><p><strong>本文作者</strong>：Lee<br/><strong>本文地址</strong>： <a href="leeblog.icu/2019/03/10/">leeblog.icu/2019/03/10/</a> <br/><strong>版权声明</strong>：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC 4.0 BY-NC-SA</a> 许可协议。转载请注明出处！</p>]]></content>
    
    
    <summary type="html">这是Jack睡的最早的一个晚上，也是睡的最长的一个觉，没人不知道那天梦里他去了哪。没人关心这一切。</summary>
    
    
    
    <category term="随笔" scheme="leeblog.icu/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="leeblog.icu/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
